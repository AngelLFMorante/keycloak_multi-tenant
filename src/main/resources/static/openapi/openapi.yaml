openapi: 3.0.3
info:
  title: Keycloak Demo API
  description: |
    Esta API proporciona endpoints para la gestión de usuarios, incluyendo el login a través del flujo
    Password Grant de Keycloak y el registro de nuevos usuarios.
    Está diseñada para operar en un entorno multi-tenant, donde cada 'realm' en la URL
    corresponde a un tenant específico mapeado a un realm en Keycloak.
  version: 1.0.0
servers:
  - url: https://api.yourdomain.com # URL base real (ej. https://api.yourdomain.com/v1)
    description: Servidor de Producción
  - url: http://localhost:8081 # URL base (ej. http://localhost:8081)
    description: Servidor de Desarrollo Local

tags:
  - name: Autenticación
    description: Operaciones relacionadas con el login y manejo de sesiones.
  - name: Registro de Usuarios
    description: Operaciones para el registro de nuevos usuarios.

paths:
  /{realm}/login:
    get:
      summary: Obtener información del login de un tenant
      description: Proporciona información básica sobre el endpoint de login para un tenant/realm específico.
      operationId: getTenantLoginInfo
      tags:
        - Autenticación
      parameters:
        - name: realm
          in: path
          description: El nombre del realm (tenant) al que se intenta acceder.
          required: true
          schema:
            type: string
          example: mytenant
      responses:
        200:
          description: Información de login del tenant obtenida con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  realm:
                    type: string
                    description: El nombre del tenant solicitado.
                  keycloakRealm:
                    type: string
                    description: El nombre del realm real de Keycloak al que mapea este tenant.
                example:
                  realm: mytenant
                  keycloakRealm: master
        404:
          $ref: '#/components/responses/NotFoundTenant'
        500:
          $ref: '#/components/responses/InternalServerError'

  /{realm}/register:
    get:
      summary: Obtener información del registro de un tenant
      description: Proporciona información básica sobre el endpoint de registro para un tenant/realm específico.
      operationId: getTenantRegisterInfo
      tags:
        - Registro de Usuarios
      parameters:
        - name: realm
          in: path
          description: El nombre del realm (tenant) al que se intenta acceder para registrarse.
          required: true
          schema:
            type: string
          example: mytenant
      responses:
        200:
          description: Información de registro del tenant obtenida con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  realm:
                    type: string
                    description: El nombre del tenant solicitado.
                  registerRequest:
                    $ref: '#/components/schemas/RegisterRequest'
                  keycloakRealm:
                    type: string
                    description: El nombre del realm real de Keycloak al que mapea este tenant.
                example:
                  realm: mytenant
                  registerRequest:
                    username: ""
                    email: ""
                    password: ""
                    confirmPassword: ""
                    firstName: ""
                    lastName: ""
                  keycloakRealm: master
        404:
          $ref: '#/components/responses/NotFoundTenant'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Registrar un nuevo usuario
      description: Registra un nuevo usuario en Keycloak para un tenant/realm específico.
        Requiere que las contraseñas coincidan y que el email no esté ya registrado.
        El usuario se crea deshabilitado por defecto, requiriendo aprobación del administrador.
      operationId: registerUser
      tags:
        - Registro de Usuarios
      parameters:
        - name: realm
          in: path
          description: El nombre del realm (tenant) donde se registrará el usuario.
          required: true
          schema:
            type: string
          example: mytenant
      requestBody:
        description: Datos del usuario para el registro.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: Usuario registrado con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de éxito.
                  tenantId:
                    type: string
                    description: El ID del tenant.
                  keycloakRealm:
                    type: string
                    description: El realm de Keycloak asociado.
                example:
                  message: User registered. Waiting for admin approval.
                  tenantId: mytenant
                  keycloakRealm: master
        400:
          description: Errores de validación de los campos de entrada o contraseñas no coinciden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validationError:
                  summary: Error de validación de campos
                  value:
                    timestamp: '2025-07-16T10:00:00.000+00:00'
                    status: 400
                    error: Bad Request
                    message: Uno o mas campos tienen errores de validacion
                    details:
                      username: El nombre de usuario no puede estar vacio
                      email: El email debe tener un formato valido
                    path: /mytenant/register
                passwordMismatch:
                  summary: Contraseñas no coinciden
                  value:
                    timestamp: '2025-07-16T10:00:00.000+00:00'
                    status: 400
                    error: Bad Request
                    message: Password no coinciden
                    path: /mytenant/register
        404:
          $ref: '#/components/responses/NotFoundTenant'
        409:
          description: El usuario (email o username) ya está registrado en Keycloak.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2025-07-16T10:00:00.000+00:00'
                status: 409
                error: Conflict
                message: El email 'existing@example.com' ya está registrado en Keycloak.
                path: /mytenant/register
        500:
          $ref: '#/components/responses/InternalServerError'

  /{realm}/{client}/do_login:
    post:
      summary: Autenticación de usuario vía Password Grant (Keycloak)
      description: Autentica a un usuario contra Keycloak utilizando el flujo de Password Grant.
        Tras una autenticación exitosa en Keycloak, integra la sesión con Spring Security y devuelve los tokens.
      operationId: doLogin
      tags:
        - Autenticación
      parameters:
        - name: realm
          in: path
          description: El nombre del realm (tenant) para el que se intenta el login.
          required: true
          schema:
            type: string
          example: mytenant
        - name: client
          in: path
          description: El Client ID configurado en Keycloak para el cual se intenta el login.
          required: true
          schema:
            type: string
          example: my-app-client
      requestBody:
        description: Credenciales del usuario para el login.
        required: true
        content:
          application/x-www-form-urlencoded: # Keycloak Password Grant espera x-www-form-urlencoded
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: El nombre de usuario.
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: La contraseña del usuario.
                  example: mysecretpassword
              required:
                - username
                - password
      responses:
        200:
          description: Login exitoso. Devuelve los tokens de Keycloak y la información del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        400:
          description: Credenciales inválidas, cliente de Keycloak no encontrado o secreto de cliente no configurado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Credenciales inválidas
                  value:
                    timestamp: '2025-07-16T10:00:00.000+00:00'
                    status: 400
                    error: Bad Request
                    message: Invalid credentials or Keycloak client error.
                    responseBody: '{"error":"invalid_grant","error_description":"Invalid user credentials"}'
                    path: /mytenant/my-app-client/do_login
                clientSecretNotFound:
                  summary: Secreto de cliente no encontrado
                  value:
                    timestamp: '2025-07-16T10:00:00.000+00:00'
                    status: 400
                    error: Bad Request
                    message: Client ID configurado pero secreto no encontrado para my-app-client.Asegurate de que el client ID esté configurado en 'keycloak.client-secrets' en properties.
                    path: /mytenant/my-app-client/do_login
        404:
          $ref: '#/components/responses/NotFoundTenant'
        500:
          $ref: '#/components/responses/InternalServerError'

  /logout:
    post:
      summary: Cerrar sesión (Logout)
      description: Invalida la sesión actual en la aplicación y revoca el Refresh Token en Keycloak.
        Requiere una sesión activa (JSESSIONID) para identificar al usuario.
      operationId: doLogout
      tags:
        - Autenticación
      security:
        - cookieAuth: [ ] # Asume que la autenticación se basa en la cookie de sesión
      responses:
        200:
          description: Sesión cerrada exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RegisterRequest:
      type: object
      description: Objeto de solicitud para el registro de un nuevo usuario.
      properties:
        username:
          type: string
          description: El nombre de usuario deseado.
          minLength: 3
          maxLength: 50
          example: newuser123
        email:
          type: string
          format: email
          description: La dirección de correo electrónico del usuario.
          example: new.user@example.com
        password:
          type: string
          format: password
          description: La contraseña del usuario.
          minLength: 8
          example: StrongP@ssw0rd
        confirmPassword:
          type: string
          format: password
          description: Confirmación de la contraseña (debe coincidir con 'password').
          minLength: 8
          example: StrongP@ssw0rd
        firstName:
          type: string
          description: El primer nombre del usuario.
          example: Jane
        lastName:
          type: string
          description: El apellido del usuario.
          example: Doe
      required:
        - username
        - email
        - password
        - confirmPassword
        - firstName
        - lastName

    LoginSuccessResponse:
      type: object
      description: Objeto de respuesta para un login exitoso.
      properties:
        message:
          type: string
          description: Mensaje de éxito.
          example: Login successful
        username:
          type: string
          description: El nombre de usuario autenticado (preferred_username de Keycloak).
          example: user@example.com
        email:
          type: string
          format: email
          description: La dirección de correo electrónico del usuario (claim 'email' de Keycloak).
          nullable: true
          example: user@example.com
        fullName:
          type: string
          description: El nombre completo del usuario (claim 'name' de Keycloak).
          nullable: true
          example: John Doe
        roles:
          type: array
          description: Lista de roles del usuario extraídos de Keycloak (ej. "ROLE_USER", "ROLE_MANAGEMENT_ACCESS").
          items:
            type: string
          example: [ "ROLE_USER", "ROLE_MANAGEMENT_ACCESS" ]
        accessToken:
          type: string
          description: El Access Token JWT emitido por Keycloak.
          example: eyJhbGciOiJSUzI1NiI...
        idToken:
          type: string
          description: El ID Token JWT emitido por Keycloak (si se solicitó).
          nullable: true
          example: eyJhbGciOiJSUzI1NiI...
        refreshToken:
          type: string
          description: El Refresh Token JWT emitido por Keycloak.
          example: eyJhbGciOiJSUzI1NiI...
        expiresIn:
          type: integer
          format: int64
          description: Tiempo de validez del Access Token en segundos.
          example: 300
        refreshExpiresIn:
          type: integer
          format: int64
          description: Tiempo de validez del Refresh Token en segundos.
          example: 1800
        realm:
          type: string
          description: El nombre del tenant (realm) utilizado para el login.
          example: mytenant
        client:
          type: string
          description: El Client ID utilizado para el login.
          example: my-app-client

    # Esquemas para respuestas de error (reutilizables)
    ErrorResponse:
      type: object
      description: Estructura genérica de respuesta para errores, manejada por GlobalExceptionHandler.
      properties:
        timestamp:
          type: string
          format: date-time
          description: Fecha y hora en que ocurrió el error.
          example: '2025-07-16T10:21:52.000+00:00'
        status:
          type: integer
          description: Código de estado HTTP del error.
          example: 400
        error:
          type: string
          description: La frase de razón del estado HTTP (ej. "Bad Request", "Not Found").
          example: Bad Request
        message:
          type: string
          description: Mensaje descriptivo del error.
          example: Uno o mas campos tienen errores de validacion
        path:
          type: string
          description: La ruta de la solicitud que causó el error. (No siempre presente en todos los manejadores de tu código, pero común en Spring Boot).
          nullable: true
          example: /mytenant/register
        details:
          type: object
          additionalProperties:
            type: string
          description: Detalles adicionales del error, especialmente para errores de validación de campos (mensaje de error). Presente solo para MethodArgumentNotValidException.
          nullable: true
          example:
            username: El nombre de usuario no puede estar vacio
            email: El email debe tener un formato valido
        responseBody:
          type: string
          description: Cuerpo de la respuesta original de un servicio externo si aplica (ej. de Keycloak). Presente solo para HttpClientErrorException, HttpServerErrorException, UnknownHttpStatusCodeException.
          nullable: true
          example: '{"error":"invalid_grant","error_description":"Invalid user credentials"}'
      required:
        - timestamp
        - status
        - error
        - message

  responses:
    NotFoundTenant:
      description: Tenant no reconocido.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2025-07-16T10:21:52.000+00:00'
            status: 404
            error: Not Found
            message: Tenant mytenant no reconocido.
            path: /mytenant/login
    InternalServerError:
      description: Error interno del servidor.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            timestamp: '2025-07-16T10:21:52.000+00:00'
            status: 500
            error: Internal Server Error
            message: Ocurrió un error inesperado. Por favor, intente de nuevo mas tarde.
            path: /some-faulty-endpoint
  securitySchemes:
    keycloakOAuth2Password:
      type: oauth2
      description: Autenticación mediante Keycloak utilizando el flujo de "Password Credentials".
        Los tokens se obtienen a través del endpoint do_login.
      flows:
        password:
          tokenUrl: http://localhost:8080/realms/master/protocol/openid-connect/token # URL real de token de Keycloak (authServerUrl + /realms/TU_REALM/protocol/openid-connect/token)
          scopes:
            openid: Permite solicitar un ID Token.
            profile: Permite solicitar información básica del perfil del usuario.
            email: Permite solicitar la dirección de correo electrónico del usuario.
            # Añade aquí otros scopes si tu aplicación los usa y los configuras en Keycloak
            # Ej: read:user, write:products
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
      description: Autenticación basada en la cookie de sesión JSESSIONID de Spring Security.
