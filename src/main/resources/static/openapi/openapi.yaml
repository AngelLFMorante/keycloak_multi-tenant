openapi: 3.0.3
info:
  title: Keycloak Multi-Tenant API
  description: API REST para la gestión de autenticación y usuarios en un entorno multi-tenant con Keycloak. Utiliza un flujo de Password Grant Type para el login.
  version: 1.0.0
servers:
  - url: 'http://localhost:8081/api/v1'
    description: Servidor de desarrollo

paths:
  /{realm}/login:
    get:
      summary: Obtiene información del tenant para el login
      operationId: getLoginInfo
      tags:
        - Authentication
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Información del tenant para el login
          content:
            application/json:
              schema:
                type: object
                properties:
                  realm:
                    type: string
                  keycloakRealm:
                    type: string
        '404':
          description: Tenant no reconocido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{realm}/{client}/do_login:
    post:
      summary: Autentica un usuario y crea una sesión
      description: Delega la autenticación a Keycloak y, si es exitosa, establece una sesión de Spring Security.
      operationId: doLogin
      tags:
        - Authentication
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
        - name: client
          in: path
          description: El ID del cliente de Keycloak
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: El nombre de usuario para el login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: La contraseña del usuario
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login exitoso, se devuelven los tokens y la información del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Credenciales inválidas o datos de sesión faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tenant o cliente no reconocido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refresh:
    post:
      summary: Renueva el token de acceso usando un refresh token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        description: Objeto que contiene el refresh token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Renovación de token exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseRefresh'
        '400':
          description: Refresh token no válido o datos de sesión faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Sesión no activa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: Revoca el refresh token y cierra la sesión del usuario
      operationId: logout
      tags:
        - Authentication
      requestBody:
        description: Objeto que contiene el refresh token a revocar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Logout exitoso, token revocado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout exitoso. Token revocado."
        '400':
          description: Refresh token no válido o datos de sesión faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Sesión no activa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{realm}/users/register:
    post:
      summary: Registra un nuevo usuario en un tenant
      operationId: registerUser
      tags:
        - User Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
      requestBody:
        description: Datos del nuevo usuario a registrar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario registrado. Esperando aprobacion de administrador."
                  tenantId:
                    type: string
                  keycloakRealm:
                    type: string
        '400':
          description: Error de validación o datos de sesión faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tenant no reconocido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El email ya está registrado o hay un conflicto en Keycloak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al interactuar con Keycloak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{realm}/users:
    get:
      summary: Obtiene una lista de todos los usuarios en un tenant
      operationId: getAllUsers
      tags:
        - User Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRepresentation'
        '404':
          description: Tenant no reconocido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al obtener usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{realm}/users/{userId}:
    put:
      summary: Actualiza la información de un usuario
      operationId: updateUser
      tags:
        - User Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: El ID del usuario a actualizar
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Datos del usuario a actualizar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuario actualizado exitosamente
        '400':
          description: Error de validación o formato de ID inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tenant o usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al actualizar el usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Elimina un usuario por su ID
      operationId: deleteUser
      tags:
        - User Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: El ID del usuario a eliminar
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Usuario eliminado exitosamente
        '404':
          description: Tenant o usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al eliminar el usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{realm}/roles:
    get:
      summary: Obtiene todos los roles disponibles en un tenant
      operationId: getRoles
      tags:
        - Role Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleRepresentation'
        '404':
          description: Tenant no reconocido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al obtener los roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Crea un nuevo rol en un tenant
      operationId: createRole
      tags:
        - Role Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
      requestBody:
        description: Datos del rol a crear
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Rol creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rol creado exitosamente."
                  roleName:
                    type: string
                  realm:
                    type: string
        '400':
          description: Error de validación en los datos del rol
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tenant no reconocido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El rol ya existe o hay un conflicto en Keycloak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al crear el rol
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{realm}/roles/{roleName}:
    delete:
      summary: Elimina un rol de un tenant
      operationId: deleteRole
      tags:
        - Role Management
      parameters:
        - name: realm
          in: path
          description: El identificador del tenant (realm)
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          description: El nombre del rol a eliminar
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rol eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rol 'admin' eliminado exitosamente."
                  realm:
                    type: string
        '404':
          description: Tenant o rol no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor al eliminar el rol
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        username:
          type: string
        email:
          type: string
        fullName:
          type: string
        roles:
          type: array
          items:
            type: string
        access_token:
          type: string
        idToken:
          type: string
        refresh_token:
          type: string
        expiresIn:
          type: integer
        refreshExpiresIn:
          type: integer
        realm:
          type: string
        client:
          type: string
      example:
        message: "Login successful"
        username: "user.test"
        email: "user@test.com"
        fullName: "Test User"
        roles:
          - "ROLE_USER"
        access_token: "eyJ..."
        idToken: "eyJ..."
        refresh_token: "eyJ..."
        expiresIn: 300
        refreshExpiresIn: 1800
        realm: "tenant1"
        client: "mi-app-plexus"

    AuthResponseRefresh:
      type: object
      properties:
        message:
          type: string
          example: "Token refreshed successfully"
        access_token:
          type: string
        idToken:
          type: string
        refresh_token:
          type: string
        expiresIn:
          type: integer
        refreshExpiresIn:
          type: integer
        realm:
          type: string
        client:
          type: string
      example:
        message: "Token refreshed successfully"
        access_token: "eyJ..."
        idToken: "eyJ..."
        refresh_token: "eyJ..."
        expiresIn: 300
        refreshExpiresIn: 1800
        realm: "tenant1"
        client: "mi-app-plexus"

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: El refresh token para obtener un nuevo token de acceso.
          example: "eyJhbGciOiJIUzUxMi..."

    UserRequest:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - role
      properties:
        username:
          type: string
          description: El nombre de usuario deseado.
          example: "new.user"
        email:
          type: string
          description: La dirección de correo electrónico del usuario.
          format: email
          example: "new.user@example.com"
        firstName:
          type: string
          description: El primer nombre del usuario.
          example: "Nuevo"
        lastName:
          type: string
          description: El apellido del usuario.
          example: "Usuario"
        role:
          type: string
          description: Rol que se le asignará en Keycloak.
          example: "user"

    UserRepresentation:
      type: object
      properties:
        id:
          type: string
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        username:
          type: string
          example: "john.doe"
        email:
          type: string
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        enabled:
          type: boolean
          example: true
        createdTimestamp:
          type: integer
          example: 1678886400

    CreateRoleRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: El nombre del rol a crear.
          minLength: 3
          maxLength: 50
          example: "admin_role"
        description:
          type: string
          description: La descripción del rol.
          maxLength: 255
          example: "Rol de administrador del sistema."

    RoleRepresentation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        composite:
          type: boolean
        clientRole:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
        details:
          type: object
          description: Detalles adicionales del error, como errores de validación.
      example:
        timestamp: "2025-08-06T06:54:30.468Z"
        status: 400
        error: "Bad Request"
        message: "Uno o mas campos tienen errores de validacion"
        details:
          username: "El nombre de usuario no puede estar vacio"