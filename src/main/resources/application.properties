# Server Port
server.port=8081

# Keycloak Base URL (where your Keycloak instance is running)
keycloak.auth-server-url=http://localhost:8080

# --- Default/Template OAuth2 Client Registration ---
# Es la CONFIGURACIÓN POR DEFECTO o la PLANTILLA que Spring Security utiliza para INICIAR EL PROCESO OAuth2.
# DynamicClientRegistrationRepository toma esta "base" y la ADAPTA a cada tenant.
# <-- Este ID de cliente no importa mucho aquí, ya que será sobrescrito dinámicamente. Puedes poner un nombre descriptivo como "base-app-client".
spring.security.oauth2.client.registration.keycloak.client-id=placeholder-client-id-base
# <-- Lo mismo, si tus clientes Keycloak son públicos, déjalo vacío. Si son confidenciales, puedes poner un placeholder o el mismo secret para todos si es el mismo.
spring.security.oauth2.client.registration.keycloak.client-secret=APE7Jo7L22EY8yTKh50v6B82nQ8l3f24
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# <-- MUY IMPORTANTE: Se mantiene {realmName} y {registrationId} porque DynamicClientRegistrationRepository los sustituirá.
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/{realmName}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email

# --- Provider Configuration (Template) ---
# ESTO TAMBIÉN ES UNA PLANTILLA. Indica a Spring Security cómo construir la URL del emisor (issuer) de Keycloak.
# DynamicClientRegistrationRepository reemplazará {realmName} por el realm real del tenant.
# <-- MUY IMPORTANTE: Se mantiene {realmName}
spring.security.oauth2.client.provider.keycloak.issuer-uri=${keycloak.auth-server-url}/realms/{realmName}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# Logging for debugging
logging.level.org.springframework.security=DEBUG
logging.level.org.keycloak=DEBUG